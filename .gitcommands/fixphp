#!/usr/bin/env bash

PROJECT=$(git rev-parse --show-toplevel)
STAGED_FILES_CMD=$(git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\.php)
PHPCSPATH=false
PINTPATH=false

skipfix=false
files=""

# Loop through the command-line arguments
for arg in "$@"; do
    case $arg in
    --skipfix)
        skipfix=true
        ;;
    --files=*)
        files="${arg#*=}"
        ;;
    *)
        # Handle other arguments as needed
        ;;
    esac
done

# --------------------------
# Determine if a file list is passed
SPACE_SPLITTER='\n'
SFILES=''

# Use the value of the `files` flag
if [ -n "$files" ]; then
    SFILES="$files"
fi

SFILES=${SFILES:-$STAGED_FILES_CMD}

# --------------------------
# Make sure PHPCS is installed
echo "\nValidating PHPCS:"

if [[ -x ./vendor/bin/pint ]]; then
    echo "PINT is available in Root"
    PINTPATH=./vendor/bin/pint
else
    if [[ -x ./.jarvis/vendor/bin/pint ]]; then
        echo "Pint is available in Jarvis"
        PINTPATH=./.jarvis/vendor/bin/pint
    else
        echo -e "\t\033[41m---->Skipping PINT, not available or not installed\033[0m\n"
    fi
fi

if command -v phpcs &>/dev/null; then
    echo "PHPCS is available in Global path"
    PHPCSPATH=phpcs
else
    if [[ -x ./vendor/bin/phpcs ]]; then
        echo "PHPCS is available in Root"
        PHPCSPATH=./vendor/bin/phpcs
    else
        if [[ -x ./.jarvis/vendor/bin/phpcs ]]; then
            echo "PHPCS is available in Jarvis"
            PHPCSPATH=./.jarvis/vendor/bin/phpcs
        else
            echo -e "\t\033[41m---->Validation not available, Please install PHPCS\033[0m\n"
        fi
    fi
fi

FILES=()

# --------------------------
# Start checking errors
echo "Checking PHP Lint..."
for FILE in $SFILES; do
    php -l -d display_errors=0 "$PROJECT/$FILE"
    if [ $? != 0 ]; then
        # echo in red
        echo -e "\t\033[41mFix the error before commit!\033[0m\n"
        echo -e "\t\033[41mSee affected file(s):\033[0m\n"
        printf "\033[31m%s\033[0m\n" "$FILE"
        exit 1
    fi
    FILES+=("$PROJECT/$FILE")
done

if [ "$PINTPATH" != false ]; then

    # --------------------------
    #RUN the PHPCS
    RULESET="$PROJECT/pint.json"
    echo $RULESET
    if [ "$FILES" != '' ]; then
        echo "Running PINT."
        # Execute PINT
        $PINTPATH -v --config "$RULESET" "${FILES[@]}"
    fi
    echo "----------------------------------------"
    echo -e "\n"
fi

if [ "$PHPCSPATH" != false ]; then

    # --------------------------
    #RUN the PHPCS
    RULESET="$PROJECT/phpcs.xml"
    erroFound=false

    if [ ! -f "$PROJECT/phpcs.xml" ]; then
        RULESET="PSR12"
    fi

    if [ "$FILES" != '' ]; then
        echo "Running Code Sniffer. Code KNIGHTTOWER standard."

        $PHPCSPATH --standard="$RULESET" --encoding=utf-8 --colors -n -p "${FILES[@]}"

        if [ $? -ne 0 ]; then
            echo -e "\t\033[41mFix the error before commit!\033[0m\n"

            if [ "$skipfix" = false ]; then
                while true; do
                    read -p $'\e[91m--------- Fix automatically? (Y or N)?\e[0m' yn

                    case $yn in
                    [Yy]*)
                        phpcbf --standard="$RULESET" --encoding=utf-8 --extensions=php -n -p -v "${FILES[@]}"
                        break
                        ;;
                    [Nn]*)
                        echo "No fix applied"
                        break
                        ;;
                    *) echo "Please answer yes or no!." ;;
                    esac
                done
            fi
            exit 1
        else
            echo "------------ PASSED ----------------"
        fi
    fi
    echo "----------------------------------------"
    echo -e "\n"

    exit $?
fi
