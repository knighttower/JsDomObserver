#!/usr/bin/env bash
rootDir="$(pwd)"

# Prompt function for user input with colored message
source "$rootDir/.bash-helpers/utility-functions.sh"

function deleteVolume() {
    mapfile -t volumes < <(docker volume ls -q | xargs docker volume inspect --format='{{.Name}}')

    for i in "${!volumes[@]}"; do
        echo -e "\e[32m[${i}]\e[0m ${volumes[$i]}"
    done

    read -p $'\033[48;5;33m\033[38;5;11m-------enter volume number or type ALL if all or N if 'none' \033[0m : ' volume

    if [[ $volume =~ ^[0-9]+$ ]] && [ "$volume" -ge 0 ] && [ "$volume" -lt ${#volumes[@]} ]; then
        name="${volumes[$volume]}"
        selectedVolume="${volumes[$volume]}"
        docker volume rm "$selectedVolume"
        echo -e "\e[32mVolume $name removed\e[0m"
    elif [[ $volume == "ALL" ]]; then
        for i in "${!volumes[@]}"; do
            name="${volumes[$i]}"
            selectedVolume="${volumes[$i]}"
            docker volume rm "$selectedVolume"
            echo -e "\e[32mVolume $name removed\e[0m"
        done
    elif [[ $volume == [Nn] ]]; then
        echo "no changes will be made to volumes"
    else
        echo "Invalid volume number"
    fi
}

mapfile -t projects < <(docker ps -a --filter "label=com.docker.compose.project" -q | xargs docker inspect --format='{{index .Config.Labels "com.docker.compose.project"}}' | sort | uniq)

for i in "${!projects[@]}"; do
    echo -e "\e[32m[${i}]\e[0m ${projects[$i]}"
done

onlyStop=false
volumesRemoved=false

while true; do
    read -p $'\033[48;5;33m\033[38;5;11m-------enter container number to remove \033[0m : ' project

    if [[ $project =~ ^[0-9]+$ ]] && [ "$project" -ge 0 ] && [ "$project" -lt ${#projects[@]} ]; then
        name="${projects[$project]}"

        if [ -z "$name" ]; then
            echo "Please enter a container name"
        else
            echo "You entered $name"

            while true; do
                stopMethod=$(promptInput "STOP (S) | REMOVE (R) (Container. No volumes) | FORCE REMOVE (F) (Container + all volumes) ?")

                case $stopMethod in
                [Ss]*)
                    docker-compose -p "$name" stop
                    onlyStop=true
                    break
                    ;;
                [Rr]*)
                    docker-compose -p "$name" down
                    break
                    ;;
                [Ff]*)
                    docker-compose -p "$name" down -v
                    volumesRemoved=true
                    break
                    ;;
                *)
                    echo "Invalid choice. Please try again."
                    ;;
                esac
            done

            if [ "$onlyStop" = false ]; then

                if [ "$volumesRemoved" = false ]; then

                    while true; do
                        read -p $'\033[48;5;226m\033[38;5;0mDo you want remove a volume?\033[0m (Y / N[or press Enter for none]) : ' choice

                        case $choice in
                        [Yy]*)
                            deleteVolume
                            ;;
                        [Nn]* | "")
                            break
                            ;;
                        *)
                            echo "Invalid choice. Please try again."
                            ;;
                        esac
                    done

                fi

                while true; do
                    read -p $'\e[43;30m-----Remove any Docker image?\e[0m Y or N (or leave blank if "none") : ' input

                    case $input in
                    [Yy]*)
                        # Get Docker images
                        mapfile -t images < <(docker images --format "{{.Repository}}:{{.Tag}}")

                        # Display Docker images
                        echo "Please select an image:"
                        for i in "${!images[@]}"; do
                            echo -e "\e[32m[${i}]\e[0m ${images[$i]}"
                        done

                        while true; do
                            # Prompt for user input
                            read -p $'\e[43;30m--> Enter the number of the image you want to select\e[0m : ' selection

                            # Check if the selection is a valid number
                            if [[ $selection =~ ^[0-9]+$ ]] && [ "$selection" -ge 0 ] && [ "$selection" -lt ${#images[@]} ]; then
                                selected_image="${images[$selection]}"
                                echo "You selected ${selected_image}"
                                docker rmi -f "$selected_image"
                                break
                            else
                                echo "Invalid selection"
                            fi
                        done

                        break
                        ;;
                    [Nn]* | *)
                        echo "No image to remove"
                        break
                        ;;
                    esac
                done
            else
                echo "No volumes or images to remove"
                break

            fi

            break
        fi

        break
    else
        echo "Invalid selection"
    fi
done
